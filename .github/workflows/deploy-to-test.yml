name: Deploy to test
on:
  push:
    branches:
      - dev
jobs:
  test:
    name: Unit tests
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.x
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - uses: actions/setup-node@v3
      with:
        node-version: '17'
    - name: Unit tests
      run: |
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements_for_test.txt
        export VCAP_SERVICES="{  'aws-s3-bucket': [    {      'binding_guid': '00000000-0000-0000-0000-000000000000',      'binding_name': null,      'credentials': {      'aws_access_key_id': 'key',      'aws_region': 'us-east-1',      'aws_secret_access_key': 'secret',      'bucket_name': 'bucketname',      'deploy_env': ''    },    'instance_guid': '00000000-0000-0000-0000-000000000000',    'instance_name': 'instance_name',    'label': 'aws-s3-bucket',    'name': 'instance_name',    'plan': 'default',    'provider': null,    'syslog_drain_url': null,    'tags': [      's3'    ],    'volume_mounts': []    }  ],  'postgres':[    {      'credentials': {        'uri': 'postgres://admin:secret@localhost:5432/accessibility_monitoring_app'      },      'name': 'monitoring-platform-default-db'    }  ]}"
        export ALLOWED_HOSTS='localhost 127.0.0.1 0.0.0.0'
        export SECRET_KEY=1234
        export DEBUG=TRUE
        export INTEGRATION_TEST=FALSE
        npm i
        make static_files_process
        make test

  int-test:
    needs: test
    name: Integration tests
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.x
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Integration tests
      run: |
        cd stack_tests/integration_tests
        docker-compose up --abort-on-container-exit
      env:
        AWS_ACCESS_KEY_ID_S3_STORE: ${{ secrets.AWS_ACCESS_KEY_ID_S3_STORE }}
        AWS_SECRET_ACCESS_KEY_S3_STORE: ${{ secrets.AWS_SECRET_ACCESS_KEY_S3_STORE }}
        AWS_DEFAULT_REGION_S3_STORE: ${{ secrets.AWS_DEFAULT_REGION_S3_STORE }}

  deploy:
    needs: int-test
    name: Deploy to test
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.x
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - uses: actions/setup-node@v3
      with:
        node-version: '17'
    - name: Install python dependencies and create static files
      run: |
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        export VCAP_SERVICES="{  'aws-s3-bucket': [    {      'binding_guid': '00000000-0000-0000-0000-000000000000',      'binding_name': null,      'credentials': {      'aws_access_key_id': 'key',      'aws_region': 'us-east-1',      'aws_secret_access_key': 'secret',      'bucket_name': 'bucketname',      'deploy_env': ''    },    'instance_guid': '00000000-0000-0000-0000-000000000000',    'instance_name': 'instance_name',    'label': 'aws-s3-bucket',    'name': 'instance_name',    'plan': 'default',    'provider': null,    'syslog_drain_url': null,    'tags': [      's3'    ],    'volume_mounts': []    }  ],  'postgres':[    {      'credentials': {        'uri': 'postgres://admin:secret@localhost:5432/accessibility_monitoring_app'      },      'name': 'monitoring-platform-default-db'    }  ]}"
        export ALLOWED_HOSTS='localhost 127.0.0.1 0.0.0.0'
        export SECRET_KEY=1234
        export DEBUG=TRUE
        npm i
        make static_files_process

    - name: Installing cloud foundry
      run: |
        sudo apt-get update
        sudo apt install wget -y
        sudo apt-get install gnupg2 -y
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install cf7-cli

    - name: Push to cf
      run: |
        cf login -a ${{ secrets.CF_ENDPOINT }} -u ${{ secrets.CF_USER }} -p '${{ secrets.CF_PASSWORD }}' -o ${{ secrets.CF_ORGANISATION }} -s monitoring-platform-test
        cf push -f cf_manifest/manifest-test.yml
