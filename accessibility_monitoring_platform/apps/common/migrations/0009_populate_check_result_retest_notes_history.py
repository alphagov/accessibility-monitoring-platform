# Generated by Django 5.1.8 on 2025-04-24 08:21
import ast

from django.db import migrations

CHECK_RESULT_CONTENT_TYPE_ID: int = 51
RETEST_STATE_LABEL_DEFAULT: str = "Not fixed"
RETEST_STATE_LABELS: dict[str, str] = {
    "fixed": "Fixed",
    "not-fixed": RETEST_STATE_LABEL_DEFAULT,
    "not-retested": "Not retested",
}


def populate_retest_notes_history(apps, schema_editor):
    Event = apps.get_model("common", "Event")
    FieldHistory = apps.get_model("common", "FieldHistory")
    for event in (
        Event.objects.filter(content_type_id=CHECK_RESULT_CONTENT_TYPE_ID)
        .filter(type="model_update")
        .filter(value__contains="retest_notes")
        .order_by("created")
    ):
        value_dict = ast.literal_eval(event.value)
        if "retest_notes" in value_dict:
            _, retest_notes = value_dict["retest_notes"].split(" -> ")
        else:
            continue
        if "retest_state" in value_dict:
            _, retest_state = value_dict["retest_state"].split(" -> ")
            retest_state_label = RETEST_STATE_LABELS[retest_state]
        else:
            retest_state_label = RETEST_STATE_LABEL_DEFAULT
        field_history = FieldHistory.objects.create(
            object_id=event.object_id,
            content_type_id=event.content_type_id,
            parent_status_label=retest_state_label,
            created_by=event.created_by,
            value=retest_notes,
        )
        field_history.created = event.created
        field_history.save()


def reverse_code(apps, schema_editor):  # pylint: disable=unused-argument
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0008_fieldhistory"),
    ]

    operations = [
        migrations.RunPython(populate_retest_notes_history, reverse_code=reverse_code),
    ]
