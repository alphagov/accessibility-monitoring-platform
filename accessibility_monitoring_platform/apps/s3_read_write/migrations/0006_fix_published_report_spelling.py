# Generated by Django 4.1.10 on 2023-07-19 07:27

import boto3

from django.db import migrations

from ....settings.base import DATABASES, S3_MOCK_ENDPOINT

from ..utils import S3ReadWriteReport


def correct_spelling(apps, schema_editor):  # pylint: disable=unused-argument
    S3Report = apps.get_model("s3_read_write", "S3Report")
    import pdb

    pdb.set_trace()
    bucket_name: str = DATABASES["aws-s3-bucket"]["bucket_name"]
    s3_client = boto3.client(
        "s3",
        region_name=DATABASES["aws-s3-bucket"]["aws_region"],
        aws_access_key_id=DATABASES["aws-s3-bucket"]["aws_access_key_id"],
        aws_secret_access_key=DATABASES["aws-s3-bucket"]["aws_secret_access_key"],
        endpoint_url=S3_MOCK_ENDPOINT,
    )

    s3_read_write_report: S3ReadWriteReport = S3ReadWriteReport()
    for s3_report in S3Report.objects.filter(html__contains="statment"):
        s3_report.html = s3_report.html.replace("statment", "statement")
        s3_report.save()

        s3_key: str = s3_read_write_report.url_builder(
            organisation_name=s3_report.case.organisation_name,
            case_id=s3_report.case.id,
            version=1,
            report_version="v1_2_0__20230523",
            guid=s3_report.guid,
        )
        s3_client.put_object(
            Body=s3_report.html,
            Bucket=bucket_name,
            Key=s3_key,
        )


def reverse_code(apps, schema_editor):  # pylint: disable=unused
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("s3_read_write", "0005_cleanup_latest_published"),
    ]

    operations = [
        migrations.RunPython(correct_spelling, reverse_code=reverse_code),
    ]
