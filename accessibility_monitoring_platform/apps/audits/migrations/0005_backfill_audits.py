# Generated by Django 5.0.7 on 2024-07-17 10:14

from datetime import date

from django.db import migrations

OLD_DEACTIVATED_CASE_IDS = [
    1062,  # Wyre Council
    1381,  # Norfolk County Council
    1420,  # Cheshire West and Chester Council
    1895,  # University of the West of Scotland
]

MANDATORY_PAGE_TYPES = [
    "home",
    "contact",
    "statement",
    "coronavirus",
    "pdf",
    "form",
]


def backfill_audits(apps, schema_editor):  # pylint: disable=unused-argument
    """Create audits for cases which lack them"""
    today: date = date.today()
    Case = apps.get_model("cases", "Case")
    Audit = apps.get_model("audits", "Audit")
    Page = apps.get_model("audits", "Page")
    StatementCheck = apps.get_model("audits", "StatementCheck")
    StatementCheckResult = apps.get_model("audits", "StatementCheckResult")

    for case in Case.objects.filter(archive="").filter(audit_case__isnull=True):
        audit = Audit.objects.create(case=case)

        for page_type in MANDATORY_PAGE_TYPES:
            if page_type == "home":
                Page.objects.create(
                    audit=audit, page_type=page_type, url=case.home_page_url
                )
            else:
                Page.objects.create(audit=audit, page_type=page_type)

        for statement_check in (
            StatementCheck.objects.all()
            .exclude(date_start__gt=today)
            .exclude(date_end__lt=today)
        ):
            StatementCheckResult.objects.create(
                audit=audit,
                type=statement_check.type,
                statement_check=statement_check,
            )


def reverse_code(apps, schema_editor):  # pylint: disable=unused-argument
    Case = apps.get_model("cases", "Case")
    Audit = apps.get_model("audits", "Audit")
    Page = apps.get_model("audits", "Page")
    StatementCheckResult = apps.get_model("audits", "StatementCheckResult")
    for case_id in OLD_DEACTIVATED_CASE_IDS:
        case = Case.objects.get(id=case_id)
        audit = Audit.objects.get(case=case)
        StatementCheckResult.objects.filter(audit=audit).delete()
        Page.objects.filter(audit=audit).delete()
        Audit.objects.filter(id=audit.id).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("audits", "0004_alter_audit_date_of_test"),
    ]

    operations = [
        migrations.RunPython(backfill_audits, reverse_code=reverse_code),
    ]
