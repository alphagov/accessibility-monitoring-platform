# Generated by Django 5.2.1 on 2025-05-20 07:53

import csv
import re
from datetime import datetime, timezone
from typing import Match

from django.db import migrations

INPUT_FILE_NAME = "../mobile_cases.csv"


def get_datetime_from_string(date: str) -> datetime:
    day, month, year = date.split("/")
    day: int = int(day)
    month: int = int(month)
    year: int = int(year)
    if year < 100:
        year += 2000
    return datetime(year, month, day, tzinfo=timezone.utc)


def extract_domain_from_url(url: str) -> str:
    """Extract and return domain string from url string"""
    if url.startswith("https://"):
        url = url[8:]
    elif url.startswith("http://"):
        url = url[7:]
    domain_match: Match[str] | None = re.search("([A-Za-z_0-9.-]+).*", url)
    return domain_match.group(1) if domain_match else ""


def populate_mobile_cases(apps, schema_editor):  # pylint: disable=unused-argument
    User = apps.get_model("auth", "User")
    try:
        paul = User.objects.get(first_name="Paul")
        auditors: dict[str, User] = {
            first_name: User.objects.get(first_name=first_name)
            for first_name in ["Andrew", "Katherine", "Kelly"]
        }
    except User.DoesNotExist:  # Automated tests
        return
    EventHistory = apps.get_model("mobile", "EventHistory")
    EventHistory.objects.all().delete()
    MobileCase = apps.get_model("mobile", "MobileCase")
    MobileCase.objects.all().delete()
    try:
        with open(INPUT_FILE_NAME) as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                if row["Enforcement body"] == "":
                    continue
                case_number: int = int(row["Record "][1:])
                app_os: str = row["Type"].lower()
                first_contact_date: str = row["First contact date"]  # dd/mm/yyyy
                created: datetime = get_datetime_from_string(first_contact_date)
                last_date: str = row["Date decision email sent"]  # dd/mm/yyyy
                if len(last_date) > 3:
                    updated: datetime = get_datetime_from_string(last_date)
                else:
                    updated: datetime = created
                auditor: User = auditors.get(row["Auditor"], paul)
                url: str = row["URL"]
                enforcement_body: str = row["Enforcement body"].lower()
                is_complaint: str = row["Is it a complaint?"].lower()
                MobileCase.objects.create(
                    case_number=case_number,
                    created_by=paul,
                    created=created,
                    updated=updated,
                    auditor=auditor,
                    app_name=row["App name"],
                    app_store_url=url,
                    domain=extract_domain_from_url(url),
                    app_os=app_os,
                    enforcement_body=enforcement_body,
                    is_complaint=is_complaint,
                    notes=row["Summary of progress made / response from PSB"],
                )
    except FileNotFoundError:
        pass


def reverse_code(apps, schema_editor):  # pylint: disable=unused-argument
    EventHistory = apps.get_model("mobile", "EventHistory")
    EventHistory.objects.all().delete()
    MobileCase = apps.get_model("mobile", "MobileCase")
    MobileCase.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("mobile", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(populate_mobile_cases, reverse_code=reverse_code),
    ]
