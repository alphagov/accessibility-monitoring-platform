# Generated by Django 4.2.4 on 2023-10-02 14:05
import json

from django.db import migrations


def archive_old_fields(apps, schema_editor):  # pylint: disable=unused-argument
    User = apps.get_model("auth", "User")
    users = {user.id: user for user in User.objects.all()}
    Sector = apps.get_model("common", "Sector")
    sectors = {sector.id: sector for sector in Sector.objects.all()}
    Case = apps.get_model("cases", "Case")
    Contact = apps.get_model("cases", "Contact")
    Comment = apps.get_model("comments", "Comment")
    for case in Case.objects.filter(testing_methodology="spreadsheet"):
        if case.auditor:
            auditor = users.get(case.auditor.id)
            auditor_display = f"{auditor.first_name} {auditor.last_name}"
        else:
            auditor = None
            auditor_display = None
        if case.reviewer:
            reviewer = users.get(case.reviewer.id)
            reviewer_display = f"{reviewer.first_name} {reviewer.last_name}"
        else:
            reviewer = None
            reviewer_display = None
        contacts = Contact.objects.filter(case=case)
        contact_fields = []
        for count, contact in enumerate(contacts, start=1):
            contact_fields.append(
                {
                    "name": f"contact_{count}_name",
                    "type": "str",
                    "label": f"Contact {count} Name",
                    "value": contact.name,
                    "value_display": contact.name,
                }
            )
            contact_fields.append(
                {
                    "name": f"contact_{count}_job_title",
                    "type": "str",
                    "label": f"Contact {count} Job title",
                    "value": contact.job_title,
                    "value_display": contact.job_title,
                }
            )
            contact_fields.append(
                {
                    "name": f"contact_{count}_email",
                    "type": "str",
                    "label": f"Contact {count} Email",
                    "value": contact.email,
                    "value_display": contact.email,
                }
            )
            if len(contacts) > 1:
                contact_fields.append(
                    {
                        "name": f"contact_{count}_preferred",
                        "type": "str",
                        "label": f"Contact {count} Preferred contact",
                        "value": contact.preferred,
                        "value_display": contact.get_preferred_display(),
                    }
                )
        comments = Comment.objects.filter(case=case)
        archive = [
            {
                "name": "Case details",
                "complete": case.case_details_complete_date.isoformat()
                if case.case_details_complete_date
                else None,
                "fields": [
                    {
                        "name": "created",
                        "type": "date",
                        "label": "Date created",
                        "value": case.created.isoformat(),
                        "value_display": f"{case.created:%-d %B %Y}",
                    },
                    {
                        "name": "status",
                        "type": "str",
                        "label": "Status",
                        "value": case.status,
                        "value_display": case.get_status_display(),
                    },
                    {
                        "name": "auditor",
                        "type": "str",
                        "label": "Auditor",
                        "value": case.auditor_id,
                        "value_display": auditor_display,
                    },
                    {
                        "name": "home_page_url",
                        "type": "link",
                        "label": "Full URL",
                        "value": case.home_page_url,
                        "value_display": case.home_page_url,
                    },
                    {
                        "name": "organisation_name",
                        "type": "str",
                        "label": "Organisation name",
                        "value": case.organisation_name,
                        "value_display": case.organisation_name,
                    },
                    {
                        "name": "enforcement_body",
                        "type": "str",
                        "label": "Which equalities body will check the case?",
                        "value": case.enforcement_body,
                        "value_display": case.get_enforcement_body_display(),
                    },
                    {
                        "name": "psb_location",
                        "type": "str",
                        "label": "Public sector body location",
                        "value": case.psb_location,
                        "value_display": case.get_psb_location_display(),
                    },
                    {
                        "name": "psb_location",
                        "type": "str",
                        "label": "Sector",
                        "value": case.sector_id,
                        "value_display": sectors.get(case.sector_id).name,
                    },
                    {
                        "name": "is_complaint",
                        "type": "str",
                        "label": "Complaint?",
                        "value": case.is_complaint,
                        "value_display": case.get_is_complaint_display(),
                    },
                    {
                        "name": "previous_case_url",
                        "type": "link",
                        "label": "URL to previous case",
                        "value": case.previous_case_url,
                        "value_display": case.previous_case_url,
                    },
                    {
                        "name": "trello_url",
                        "type": "link",
                        "label": "Trello ticket URL",
                        "value": case.trello_url,
                        "value_display": case.trello_url,
                    },
                ],
            },
            {
                "name": "Testing details",
                "complete": case.testing_details_complete_date.isoformat()
                if case.testing_details_complete_date
                else None,
                "fields": [
                    {
                        "name": "test_results_url",
                        "type": "link",
                        "label": "Link to test results",
                        "value": case.test_results_url,
                        "value_display": "Monitor document",
                    },
                    {
                        "name": "test_status",
                        "type": "str",
                        "label": "Test status",
                        "value": case.test_status,
                        "value_display": case.get_test_status_display(),
                    },
                    {
                        "name": "accessibility_statement_state",
                        "type": "str",
                        "label": "Initial accessibility statement decision",
                        "value": case.accessibility_statement_state,
                        "value_display": case.get_accessibility_statement_state_display(),
                    },
                    {
                        "name": "accessibility_statement_notes",
                        "type": "markdown",
                        "label": "Accessibility statement notes",
                        "value": case.accessibility_statement_notes,
                        "value_display": None,
                    },
                    {
                        "name": "website_compliance_state_initial",
                        "type": "str",
                        "label": "Initial compliance decision",
                        "value": case.website_compliance_state_initial,
                        "value_display": case.get_website_compliance_state_initial_display(),
                    },
                    {
                        "name": "compliance_decision_notes",
                        "type": "markdown",
                        "label": "Initial website compliance notes",
                        "value": case.compliance_decision_notes,
                        "value_display": None,
                    },
                ],
            },
            {
                "name": "Report details",
                "complete": case.reporting_details_complete_date.isoformat()
                if case.reporting_details_complete_date
                else None,
                "fields": [
                    {
                        "name": "report_draft_url",
                        "type": "link",
                        "label": "Link to report draft",
                        "value": case.report_draft_url,
                        "value_display": "Report draft",
                    },
                    {
                        "name": "report_notes",
                        "type": "markdown",
                        "label": "Report details notes",
                        "value": case.report_notes,
                        "value_display": None,
                    },
                ],
            },
            {
                "name": "QA process",
                "complete": case.qa_process_complete_date.isoformat()
                if case.qa_process_complete_date
                else None,
                "fields": [
                    {
                        "name": "report_review_status",
                        "type": "str",
                        "label": "Report ready to be reviewed",
                        "value": case.report_review_status,
                        "value_display": case.get_report_review_status_display(),
                    },
                    {
                        "name": "reviewer",
                        "type": "str",
                        "label": "QA auditor",
                        "value": case.reviewer_id,
                        "value_display": reviewer_display,
                    },
                    {
                        "name": "qa_comments",
                        "type": "str",
                        "label": "Comments",
                        "value": comments.count(),
                        "value_display": comments.count(),
                    },
                    {
                        "name": "report_approved_status",
                        "type": "str",
                        "label": "Report approved?",
                        "value": case.report_approved_status,
                        "value_display": case.get_report_approved_status_display(),
                    },
                    {
                        "name": "report_final_odt_url",
                        "type": "link",
                        "label": "Link to final ODT report",
                        "value": case.report_final_odt_url,
                        "value_display": "Final draft (ODT)",
                    },
                    {
                        "name": "report_final_pdf_url",
                        "type": "link",
                        "label": "Link to final PDF report",
                        "value": case.report_final_pdf_url,
                        "value_display": "Final draft (PDF)",
                    },
                ],
            },
            {
                "name": "Contact details",
                "complete": case.contact_details_complete_date.isoformat()
                if case.contact_details_complete_date
                else None,
                "fields": [
                    {
                        "name": "contact_notes",
                        "type": "markdown",
                        "label": "Contact details notes",
                        "value": case.contact_notes,
                        "value_display": None,
                    },
                ]
                + contact_fields,
            },
            {
                "name": "Report correspondence",
                "complete": case.reporting_details_complete_date.isoformat()
                if case.reporting_details_complete_date
                else None,
                "fields": [
                    {
                        "name": "no_psb_contact",
                        "type": "str",
                        "label": "Public sector body is unresponsive",
                        "value": case.no_psb_contact,
                        "value_display": case.get_no_psb_contact_display(),
                    },
                    {
                        "name": "seven_day_no_contact_email_sent_date",
                        "type": "date",
                        "label": "Seven day 'no contact details' email sent",
                        "value": case.seven_day_no_contact_email_sent_date.isoformat()
                        if case.seven_day_no_contact_email_sent_date
                        else "None",
                        "value_display": f"{case.seven_day_no_contact_email_sent_date:%-d %B %Y}"
                        if case.seven_day_no_contact_email_sent_date
                        else "None",
                    },
                    {
                        "name": "report_sent_date",
                        "type": "date",
                        "label": "Report sent on",
                        "value": case.report_sent_date.isoformat()
                        if case.report_sent_date
                        else "None",
                        "value_display": f"{case.report_sent_date:%-d %B %Y}"
                        if case.report_sent_date
                        else "None",
                    },
                    {
                        "name": "report_visits",
                        "type": "str",
                        "label": "Report visits",
                        "value": "None",
                        "value_display": "None",
                    },
                    {
                        "name": "unique_report_visits",
                        "type": "str",
                        "label": "Unique report visits",
                        "value": "None",
                        "value_display": "None",
                    },
                    {
                        "name": "report_followup_week_1_due_date",
                        "type": "date",
                        "label": "1-week followup to report due",
                        "value": case.report_followup_week_1_due_date.isoformat()
                        if case.report_followup_week_1_due_date
                        else "None",
                        "value_display": f"{case.report_followup_week_1_due_date:%-d %B %Y}"
                        if case.report_followup_week_1_due_date
                        else "None",
                    },
                    {
                        "name": "report_followup_week_1_sent_date",
                        "type": "date",
                        "label": "1-week followup to report sent",
                        "value": case.report_followup_week_1_sent_date.isoformat()
                        if case.report_followup_week_1_sent_date
                        else "None",
                        "value_display": f"{case.report_followup_week_1_sent_date:%-d %B %Y}"
                        if case.report_followup_week_1_sent_date
                        else "None",
                    },
                    {
                        "name": "report_followup_week_4_due_date",
                        "type": "date",
                        "label": "4-week followup to report due",
                        "value": case.report_followup_week_4_due_date.isoformat()
                        if case.report_followup_week_4_due_date
                        else "None",
                        "value_display": f"{case.report_followup_week_4_due_date:%-d %B %Y}"
                        if case.report_followup_week_4_due_date
                        else "None",
                    },
                    {
                        "name": "report_followup_week_4_sent_date",
                        "type": "date",
                        "label": "4-week followup to report sent",
                        "value": case.report_followup_week_4_sent_date.isoformat()
                        if case.report_followup_week_4_sent_date
                        else "None",
                        "value_display": f"{case.report_followup_week_4_sent_date:%-d %B %Y}"
                        if case.report_followup_week_4_sent_date
                        else "None",
                    },
                    {
                        "name": "report_acknowledged_date",
                        "type": "date",
                        "label": "Report acknowledged",
                        "value": case.report_acknowledged_date.isoformat()
                        if case.report_acknowledged_date
                        else "None",
                        "value_display": f"{case.report_acknowledged_date:%-d %B %Y}"
                        if case.report_acknowledged_date
                        else "None",
                    },
                    {
                        "name": "zendesk_url",
                        "type": "link",
                        "label": "Zendesk ticket URL",
                        "value": case.zendesk_url,
                        "value_display": case.zendesk_url,
                    },
                    {
                        "name": "correspondence_notes",
                        "type": "markdown",
                        "label": "Correspondence notes",
                        "value": case.correspondence_notes,
                        "value_display": None,
                    },
                ],
            },
            {
                "name": "12-week correspondence",
                "complete": case.twelve_week_correspondence_complete_date.isoformat()
                if case.twelve_week_correspondence_complete_date
                else None,
                "fields": [
                    {
                        "name": "email_template_link",
                        "type": "link",
                        "label": "Email template",
                        "value": f"/cases/{case.id}/twelve-week-correspondence-email/",
                        "value_display": "View email template",
                    },
                    {
                        "name": "report_followup_week_12_due_date",
                        "type": "date",
                        "label": "12-week deadline due",
                        "value": case.report_followup_week_12_due_date.isoformat()
                        if case.report_followup_week_12_due_date
                        else "None",
                        "value_display": f"{case.report_followup_week_12_due_date:%-d %B %Y}"
                        if case.report_followup_week_12_due_date
                        else "None",
                    },
                    {
                        "name": "twelve_week_update_requested_date",
                        "type": "date",
                        "label": "12-week update requested",
                        "value": case.twelve_week_update_requested_date.isoformat()
                        if case.twelve_week_update_requested_date
                        else "None",
                        "value_display": f"{case.twelve_week_update_requested_date:%-d %B %Y}"
                        if case.twelve_week_update_requested_date
                        else "None",
                    },
                    {
                        "name": "twelve_week_1_week_chaser_due_date",
                        "type": "date",
                        "label": "1-week followup due",
                        "value": case.twelve_week_1_week_chaser_due_date.isoformat()
                        if case.twelve_week_1_week_chaser_due_date
                        else "None",
                        "value_display": f"{case.twelve_week_1_week_chaser_due_date:%-d %B %Y}"
                        if case.twelve_week_1_week_chaser_due_date
                        else "None",
                    },
                    {
                        "name": "twelve_week_1_week_chaser_sent_date",
                        "type": "date",
                        "label": "1-week followup sent",
                        "value": case.twelve_week_1_week_chaser_sent_date.isoformat()
                        if case.twelve_week_1_week_chaser_sent_date
                        else "None",
                        "value_display": f"{case.twelve_week_1_week_chaser_sent_date:%-d %B %Y}"
                        if case.twelve_week_1_week_chaser_sent_date
                        else "None",
                    },
                    {
                        "name": "twelve_week_correspondence_acknowledged_date",
                        "type": "date",
                        "label": "12-week update received",
                        "value": case.twelve_week_correspondence_acknowledged_date.isoformat()
                        if case.twelve_week_correspondence_acknowledged_date
                        else "None",
                        "value_display": f"{case.twelve_week_correspondence_acknowledged_date:%-d %B %Y}"
                        if case.twelve_week_correspondence_acknowledged_date
                        else "None",
                    },
                    {
                        "name": "twelve_week_response_state",
                        "type": "str",
                        "label": "No response to 12-week deadline",
                        "value": case.twelve_week_response_state,
                        "value_display": case.get_twelve_week_response_state_display(),
                    },
                    {
                        "name": "twelve_week_correspondence_notes",
                        "type": "markdown",
                        "label": "12-week Correspondence notes",
                        "value": case.twelve_week_correspondence_notes,
                        "value_display": None,
                    },
                ],
            },
            {
                "name": "Reviewing changes",
                "complete": case.review_changes_complete_date.isoformat()
                if case.review_changes_complete_date
                else None,
                "fields": [
                    {
                        "name": "retested_website_date",
                        "type": "date",
                        "label": "Retested website?",
                        "value": case.retested_website_date.isoformat()
                        if case.retested_website_date
                        else "None",
                        "value_display": f"{case.retested_website_date:%-d %B %Y}"
                        if case.retested_website_date
                        else "None",
                    },
                    {
                        "name": "psb_progress_notes",
                        "type": "markdown",
                        "label": "Summary of progress made from public sector body",
                        "value": case.psb_progress_notes,
                        "value_display": None,
                    },
                    {
                        "name": "is_ready_for_final_decision",
                        "type": "str",
                        "label": "Is this case ready for final decision?",
                        "value": case.is_ready_for_final_decision,
                        "value_display": case.get_is_ready_for_final_decision_display(),
                    },
                ],
            },
            {
                "name": "Final website compliance decision",
                "complete": case.final_website_complete_date.isoformat()
                if case.final_website_complete_date
                else None,
                "fields": [
                    {
                        "name": "website_state_final",
                        "type": "str",
                        "label": "Final website compliance decision",
                        "value": case.website_state_final,
                        "value_display": case.get_website_state_final_display(),
                    },
                    {
                        "name": "website_state_notes_final",
                        "type": "markdown",
                        "label": "Final website compliance decision notes",
                        "value": case.website_state_notes_final,
                        "value_display": None,
                    },
                ],
            },
            {
                "name": "Final accessibility statement compliance decision",
                "complete": case.final_statement_complete_date.isoformat()
                if case.final_statement_complete_date
                else None,
                "fields": [
                    {
                        "name": "is_disproportionate_claimed",
                        "type": "str",
                        "label": "Disproportionate burden claimed?",
                        "value": case.is_disproportionate_claimed,
                        "value_display": case.get_is_disproportionate_claimed_display(),
                    },
                    {
                        "name": "disproportionate_notes",
                        "type": "markdown",
                        "label": "Disproportionate burden notes",
                        "value": case.disproportionate_notes,
                        "value_display": None,
                    },
                    {
                        "name": "accessibility_statement_screenshot_url",
                        "type": "link",
                        "label": "Link to accessibility statement screenshot",
                        "value": case.accessibility_statement_screenshot_url,
                        "value_display": case.accessibility_statement_screenshot_url,
                    },
                    {
                        "name": "accessibility_statement_state_final",
                        "type": "str",
                        "label": "Final accessibility statement decision",
                        "value": case.accessibility_statement_state_final,
                        "value_display": case.get_accessibility_statement_state_final_display(),
                    },
                    {
                        "name": "accessibility_statement_notes_final",
                        "type": "markdown",
                        "label": "Final accessibility statement notes",
                        "value": case.accessibility_statement_notes_final,
                        "value_display": None,
                    },
                ],
            },
            {
                "name": "Closing the case",
                "complete": case.case_close_complete_date.isoformat()
                if case.case_close_complete_date
                else None,
                "fields": [
                    {
                        "name": "compliance_email_sent_date",
                        "type": "date",
                        "label": "Date when compliance decision email sent to public sector body",
                        "value": case.compliance_email_sent_date.isoformat()
                        if case.compliance_email_sent_date
                        else "None",
                        "value_display": f"{case.compliance_email_sent_date:%-d %B %Y}"
                        if case.compliance_email_sent_date
                        else "None",
                    },
                    {
                        "name": "recommendation_for_enforcement",
                        "type": "str",
                        "label": "Recommendation for equality body",
                        "value": case.recommendation_for_enforcement,
                        "value_display": case.get_recommendation_for_enforcement_display(),
                    },
                    {
                        "name": "recommendation_notes",
                        "type": "markdown",
                        "label": "Enforcement recommendation notes including exemptions",
                        "value": case.recommendation_notes,
                        "value_display": None,
                    },
                    {
                        "name": "case_completed",
                        "type": "str",
                        "label": "Case completed",
                        "value": case.case_completed,
                        "value_display": case.get_case_completed_display(),
                    },
                ],
            },
            {
                "name": "Archived",
                "complete": None,
                "fields": [
                    {
                        "name": "testing_methodology",
                        "type": "str",
                        "label": "Testing methodology",
                        "value": case.testing_methodology,
                        "value_display": case.get_testing_methodology_display(),
                    },
                    {
                        "name": "report_methodology",
                        "type": "str",
                        "label": "Report methodology",
                        "value": case.report_methodology,
                        "value_display": case.get_report_methodology_display(),
                    },
                    {
                        "name": "notes",
                        "type": "markdown",
                        "label": "Notes",
                        "value": case.notes,
                        "value_display": None,
                    },
                ],
            },
        ]
        case.archive = json.dumps(archive)
        case.save()


def reverse_code(apps, schema_editor):  # pylint: disable=unused-argument
    Case = apps.get_model("cases", "Case")
    for case in Case.objects.exclude(archive=""):
        case.archive = ""
        case.testing_methodology = "spreadsheet"
        case.save()


class Migration(migrations.Migration):
    dependencies = [
        ("cases", "0064_case_archive"),
    ]

    operations = [
        migrations.RunPython(archive_old_fields, reverse_code=reverse_code),
    ]
