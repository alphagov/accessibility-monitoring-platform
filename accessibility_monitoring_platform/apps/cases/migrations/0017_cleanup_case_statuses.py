# Generated by Django 5.2.3 on 2025-07-07 08:49

from django.db import migrations

OLD_TO_NEW_CASE_STATUS_MAPPING: dict[str, str] = {
    "unassigned-case": "000-unassigned-case",
    "test-in-progress": "050-test-in-progress",
    "report-in-progress": "060-report-in-progress",
    "unassigned-qa-case": "070-unassigned-qa-case",
    "qa-in-progress": "080-qa-in-progress",
    "report-ready-to-send": "090-report-ready-to-send",
    "in-report-correspondence": "100-in-report-correspondence",
    "in-probation-period": "120-in-12-week-period",
    "in-12-week-correspondence": "140-after-12-week-correspondence",
    "reviewing-changes": "150-reviewing-changes",
    "final-decision-due": "160-final-decision-due",
    "case-closed-waiting-to-be-sent": "170-case-closed-waiting-to-be-sent",
    "case-closed-sent-to-equalities-body": "180-case-closed-sent-to-equalities-body",
    "in-correspondence-with-equalities-body": "190-in-correspondence-with-equalities-body",
    "complete": "200-complete",
    "deactivated": "900-deactivated",
    "unknown": "910-unknown",
}


def cleanup_case_statuses(apps, schema_editor):
    BaseCase = apps.get_model("cases", "BaseCase")
    count: int = 0

    for base_case in BaseCase.objects.all():
        base_case.status = OLD_TO_NEW_CASE_STATUS_MAPPING[base_case.status]
        base_case.save()
        count += 1
        if count % 1000 == 0:
            print(f"{count} base case statuses updated")


def reverse_code(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("cases", "0016_alter_basecase_status"),
    ]

    operations = [
        migrations.RunPython(cleanup_case_statuses, reverse_code=reverse_code),
    ]
