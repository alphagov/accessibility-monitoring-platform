# Generated by Django 5.2 on 2025-04-25 12:32

from django.db import migrations


def populate_events(apps, schema_editor):
    CommonEvent = apps.get_model("common", "Event")
    CasesEvent = apps.get_model("cases", "Event")
    Contact = apps.get_model("cases", "Contact")
    Audit = apps.get_model("audits", "Audit")
    Page = apps.get_model("audits", "Page")
    CheckResult = apps.get_model("audits", "CheckResult")
    Report = apps.get_model("reports", "Report")
    Comment = apps.get_model("comments", "Comment")
    StatementCheckResult = apps.get_model("audits", "StatementCheckResult")
    EqualityBodyCorrespondence = apps.get_model("cases", "EqualityBodyCorrespondence")
    Retest = apps.get_model("audits", "Retest")
    StatementPage = apps.get_model("audits", "StatementPage")
    RetestStatementCheckResult = apps.get_model("audits", "RetestStatementCheckResult")
    ZendeskTicket = apps.get_model("cases", "ZendeskTicket")
    Task = apps.get_model("notifications", "Task")

    counter: int = 0

    for common_event in CommonEvent.objects.all():
        if common_event.content_type_id == 25:  #  cases	contact
            contact: Contact = Contact.objects.get(id=common_event.object_id)
            case_id: int = contact.case_id
        elif common_event.content_type_id == 26:  #  cases	case
            case_id: int = common_event.object_id
        elif common_event.content_type_id == 47:  #  reminders	reminder
            case_id: int | None = None
        elif common_event.content_type_id == 48:  #  audits	audit
            audit: Audit = Audit.objects.get(id=common_event.object_id)
            case_id: int = audit.case_id
        elif common_event.content_type_id == 49:  #  audits	wcagdefinition
            case_id: int | None = None
        elif common_event.content_type_id == 50:  #  audits	page
            page: Page = Page.objects.get(id=common_event.object_id)
            audit: Audit = Audit.objects.get(id=page.audit_id)
            case_id: int = audit.case_id
        elif common_event.content_type_id == 51:  #  audits	checkresult
            check_result: CheckResult = CheckResult.objects.get(
                id=common_event.object_id
            )
            audit: Audit = Audit.objects.get(id=check_result.audit_id)
            case_id: int = audit.case_id
        elif common_event.content_type_id == 54:  #  reports	report
            report: Report = Report.objects.get(id=common_event.object_id)
            case_id: int = report.case_id
        elif common_event.content_type_id == 45:  #  comments	comment
            comment: Comment = Comment.objects.get(id=common_event.object_id)
            case_id: int = comment.case_id
        elif common_event.content_type_id == 71:  #  common	frequentlyusedlink
            case_id: int | None = None
        elif common_event.content_type_id == 73:  #  audits	statementcheckresult
            statement_check_result: StatementCheckResult = (
                StatementCheckResult.objects.get(id=common_event.object_id)
            )
            audit: Audit = Audit.objects.get(id=statement_check_result.audit_id)
            case_id: int = audit.case_id
        elif common_event.content_type_id == 74:  #  common	footerlink
            case_id: int | None = None
        elif common_event.content_type_id == 77:  #  cases	equalitybodycorrespondence
            equality_body_correspondence: EqualityBodyCorrespondence = (
                EqualityBodyCorrespondence.objects.get(id=common_event.object_id)
            )
            case_id: int = equality_body_correspondence.case_id
        elif common_event.content_type_id == 78:  #  audits	retest
            retest: Retest = Retest.objects.get(id=common_event.object_id)
            case_id: int = retest.case_id
        elif common_event.content_type_id == 82:  #  audits	statementpage
            statement_page: StatementPage = StatementPage.objects.get(
                id=common_event.object_id
            )
            audit: Audit = Audit.objects.get(id=statement_page.audit_id)
            case_id: int = audit.case_id
        elif common_event.content_type_id == 107:  # audits	reteststatementcheckresult
            retest_statement_check_result: RetestStatementCheckResult = (
                RetestStatementCheckResult.objects.get(id=common_event.object_id)
            )
            retest: Retest = Retest.objects.get(
                id=retest_statement_check_result.retest_id
            )
            case_id: int = retest.case_id
        elif common_event.content_type_id == 141:  # exports	export
            case_id: int | None = None
        elif common_event.content_type_id == 173:  # cases	zendeskticket
            zendesk_ticket: ZendeskTicket = ZendeskTicket.objects.get(
                id=common_event.object_id
            )
            case_id: int = zendesk_ticket.case_id
        elif common_event.content_type_id == 206:  # common	emailtemplate
            case_id: int | None = None
        elif common_event.content_type_id == 239:  # notifications	task
            task: Task | None = Task.objects.filter(id=common_event.object_id).first()
            if task is not None:
                case_id: int | None = task.case_id

        case_event: CasesEvent = CasesEvent.objects.create(
            case_id=case_id,
            content_type_id=common_event.content_type_id,
            object_id=common_event.object_id,
            event_type=common_event.type,
            difference=common_event.value,
            created_by=common_event.created_by,
        )
        case_event.created = common_event.created
        case_event.save()

        counter += 1
        if counter % 1000 == 0:
            print(f"Added {counter} events")


def reverse_code(apps, schema_editor):  # pylint: disable=unused-argument
    CasesEvent = apps.get_model("cases", "Event")
    CasesEvent.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("cases", "0009_event"),
        ("common", "0001_initial"),
        ("audits", "0001_initial"),
        ("reports", "0001_initial"),
        ("comments", "0001_initial"),
        ("notifications", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(populate_events, reverse_code=reverse_code),
    ]
