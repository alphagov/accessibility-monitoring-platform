# Generated by Django 5.2.1 on 2025-06-04 09:28

from django.db import migrations

CASES_TO_SIMPLIFIED_MODELS: dict[str, str] = {
    "contact": "contact",
    "case": "simplifiedcase",
    "caseevent": "caseevent",
    "casecompliance": "casecompliance",
    "equalitybodycorrespondence": "equalitybodycorrespondence",
    "casestatus": "casestatus",
    "zendeskticket": "zendeskticket",
    "eventhistory": "simplifiedeventhistory",
}


def populate_simplified_cases(apps, schema_editor):
    ContentType = apps.get_model("contenttypes", "ContentType")
    case_content_models_by_id: dict[int, str] = {
        content_type.id: content_type.model
        for content_type in ContentType.objects.filter(app_label="cases")
    }
    simplified_content_ids_by_model: dict[str, int] = {
        content_type.model: content_type.id
        for content_type in ContentType.objects.filter(app_label="simplified")
    }
    Case = apps.get_model("cases", "Case")
    SimplifiedCase = apps.get_model("simplified", "SimplifiedCase")
    CaseStatus = apps.get_model("cases", "CaseStatus")
    SimplifiedCaseStatus = apps.get_model("simplified", "CaseStatus")
    CaseCompliance = apps.get_model("cases", "CaseCompliance")
    SimplifiedCaseCompliance = apps.get_model("simplified", "CaseCompliance")
    Contact = apps.get_model("cases", "Contact")
    SimplifiedContact = apps.get_model("simplified", "Contact")
    CaseEvent = apps.get_model("cases", "CaseEvent")
    SimplifiedCaseEvent = apps.get_model("simplified", "CaseEvent")
    EqualityBodyCorrespondence = apps.get_model("cases", "EqualityBodyCorrespondence")
    SimplifiedEqualityBodyCorrespondence = apps.get_model(
        "simplified", "EqualityBodyCorrespondence"
    )
    ZendeskTicket = apps.get_model("cases", "ZendeskTicket")
    SimplifiedZendeskTicket = apps.get_model("simplified", "ZendeskTicket")
    EventHistory = apps.get_model("cases", "EventHistory")
    SimplifiedEventHistory = apps.get_model("simplified", "SimplifiedEventHistory")
    for count, case in enumerate(Case.objects.all().order_by("id"), start=1):
        print(f"{count}: Creating Case number {case.case_number}")
        simplified_case = SimplifiedCase.objects.create(
            case=case,
            case_number=case.case_number,
            case_identifier=f"#S-{case.case_number}",
            archive=case.archive,
            created_by=case.created_by,
            updated=case.updated,
            updated_date=case.updated.date(),
            variant=case.variant,
            created=case.created,
            auditor=case.auditor,
            test_type=case.test_type,
            home_page_url=case.home_page_url,
            domain=case.domain,
            organisation_name=case.organisation_name,
            psb_location=case.psb_location,
            sector=case.sector,
            enforcement_body=case.enforcement_body,
            is_complaint=case.is_complaint,
            previous_case_url=case.previous_case_url,
            trello_url=case.trello_url,
            notes=case.notes,
            parental_organisation_name=case.parental_organisation_name,
            website_name=case.website_name,
            subcategory=case.subcategory,
            is_feedback_requested=case.is_feedback_requested,
            case_details_complete_date=case.case_details_complete_date,
            test_results_url=case.test_results_url,
            testing_details_complete_date=case.testing_details_complete_date,
            report_draft_url=case.report_draft_url,
            report_notes=case.report_notes,
            report_review_status=case.report_review_status,
            reporting_details_complete_date=case.reporting_details_complete_date,
            reviewer_notes=case.reviewer_notes,
            report_final_pdf_url=case.report_final_pdf_url,
            report_final_odt_url=case.report_final_odt_url,
            qa_process_complete_date=case.qa_process_complete_date,
            reviewer=case.reviewer,
            qa_auditor_complete_date=case.qa_auditor_complete_date,
            report_approved_status=case.report_approved_status,
            qa_approval_complete_date=case.qa_approval_complete_date,
            publish_report_complete_date=case.publish_report_complete_date,
            zendesk_url=case.zendesk_url,
            cores_overview_complete_date=case.cores_overview_complete_date,
            contact_notes=case.contact_notes,
            manage_contact_details_complete_date=case.manage_contact_details_complete_date,
            contact_details_found=case.contact_details_found,
            enable_correspondence_process=case.enable_correspondence_process,
            seven_day_no_contact_email_sent_date=case.seven_day_no_contact_email_sent_date,
            seven_day_no_contact_request_sent_to=case.seven_day_no_contact_request_sent_to,
            request_contact_details_complete_date=case.request_contact_details_complete_date,
            no_contact_one_week_chaser_due_date=case.no_contact_one_week_chaser_due_date,
            no_contact_one_week_chaser_sent_date=case.no_contact_one_week_chaser_sent_date,
            no_contact_one_week_chaser_sent_to=case.no_contact_one_week_chaser_sent_to,
            one_week_contact_details_complete_date=case.one_week_contact_details_complete_date,
            no_contact_four_week_chaser_due_date=case.no_contact_four_week_chaser_due_date,
            no_contact_four_week_chaser_sent_date=case.no_contact_four_week_chaser_sent_date,
            no_contact_four_week_chaser_sent_to=case.no_contact_four_week_chaser_sent_to,
            correspondence_notes=case.correspondence_notes,
            four_week_contact_details_complete_date=case.four_week_contact_details_complete_date,
            no_psb_contact=case.no_psb_contact,
            no_psb_contact_notes=case.no_psb_contact_notes,
            no_psb_contact_complete_date=case.no_psb_contact_complete_date,
            report_sent_date=case.report_sent_date,
            report_sent_to_email=case.report_sent_to_email,
            report_sent_on_complete_date=case.report_sent_on_complete_date,
            report_followup_week_1_sent_date=case.report_followup_week_1_sent_date,
            report_followup_week_1_due_date=case.report_followup_week_1_due_date,
            one_week_followup_sent_to_email=case.one_week_followup_sent_to_email,
            one_week_followup_complete_date=case.one_week_followup_complete_date,
            report_followup_week_4_sent_date=case.report_followup_week_4_sent_date,
            report_followup_week_4_due_date=case.report_followup_week_4_due_date,
            four_week_followup_sent_to_email=case.four_week_followup_sent_to_email,
            four_week_followup_complete_date=case.four_week_followup_complete_date,
            report_acknowledged_date=case.report_acknowledged_date,
            report_acknowledged_by_email=case.report_acknowledged_by_email,
            report_acknowledged_complete_date=case.report_acknowledged_complete_date,
            twelve_week_update_requested_date=case.twelve_week_update_requested_date,
            report_followup_week_12_due_date=case.report_followup_week_12_due_date,
            twelve_week_update_request_sent_to_email=case.twelve_week_update_request_sent_to_email,
            twelve_week_correspondence_notes=case.twelve_week_correspondence_notes,
            twelve_week_update_requested_complete_date=case.twelve_week_update_requested_complete_date,
            twelve_week_1_week_chaser_sent_date=case.twelve_week_1_week_chaser_sent_date,
            twelve_week_1_week_chaser_due_date=case.twelve_week_1_week_chaser_due_date,
            twelve_week_1_week_chaser_sent_to_email=case.twelve_week_1_week_chaser_sent_to_email,
            one_week_followup_final_complete_date=case.one_week_followup_final_complete_date,
            twelve_week_correspondence_acknowledged_date=case.twelve_week_correspondence_acknowledged_date,
            twelve_week_correspondence_acknowledged_by_email=case.twelve_week_correspondence_acknowledged_by_email,
            twelve_week_response_state=case.twelve_week_response_state,
            organisation_response=case.organisation_response,
            twelve_week_update_request_ack_complete_date=case.twelve_week_update_request_ack_complete_date,
            report_correspondence_complete_date=case.report_correspondence_complete_date,
            twelve_week_correspondence_complete_date=case.twelve_week_correspondence_complete_date,
            twelve_week_retest_complete_date=case.twelve_week_retest_complete_date,
            psb_progress_notes=case.psb_progress_notes,
            retested_website_date=case.retested_website_date,
            is_ready_for_final_decision=case.is_ready_for_final_decision,
            review_changes_complete_date=case.review_changes_complete_date,
            final_website_complete_date=case.final_website_complete_date,
            is_disproportionate_claimed=case.is_disproportionate_claimed,
            disproportionate_notes=case.disproportionate_notes,
            accessibility_statement_screenshot_url=case.accessibility_statement_screenshot_url,
            final_statement_complete_date=case.final_statement_complete_date,
            compliance_email_sent_date=case.compliance_email_sent_date,
            compliance_decision_sent_to_email=case.compliance_decision_sent_to_email,
            recommendation_for_enforcement=case.recommendation_for_enforcement,
            recommendation_notes=case.recommendation_notes,
            enforcement_recommendation_complete_date=case.enforcement_recommendation_complete_date,
            case_completed=case.case_completed,
            completed_date=case.completed_date,
            case_close_complete_date=case.case_close_complete_date,
            psb_appeal_notes=case.psb_appeal_notes,
            post_case_notes=case.post_case_notes,
            post_case_complete_date=case.post_case_complete_date,
            case_updated_date=case.case_updated_date,
            enforcement_body_pursuing=case.enforcement_body_pursuing,
            enforcement_body_correspondence_notes=case.enforcement_body_correspondence_notes,
            enforcement_retest_document_url=case.enforcement_retest_document_url,
            enforcement_correspondence_complete_date=case.enforcement_correspondence_complete_date,
            sent_to_enforcement_body_sent_date=case.sent_to_enforcement_body_sent_date,
            equality_body_case_start_date=case.equality_body_case_start_date,
            enforcement_body_case_owner=case.enforcement_body_case_owner,
            enforcement_body_closed_case=case.enforcement_body_closed_case,
            enforcement_body_finished_date=case.enforcement_body_finished_date,
            equality_body_notes=case.equality_body_notes,
            is_deactivated=case.is_deactivated,
            deactivate_date=case.deactivate_date,
            deactivate_notes=case.deactivate_notes,
            qa_status=case.qa_status,
        )
        for case_status in CaseStatus.objects.filter(case=case):
            SimplifiedCaseStatus.objects.create(
                case=simplified_case, status=case_status.status
            )
            simplified_case.status = case_status.status
        for case_compliance in CaseCompliance.objects.filter(case=case):
            SimplifiedCaseCompliance.objects.create(
                case=simplified_case,
                website_compliance_state_initial=case_compliance.website_compliance_state_initial,
                website_compliance_notes_initial=case_compliance.website_compliance_notes_initial,
                statement_compliance_state_initial=case_compliance.statement_compliance_state_initial,
                statement_compliance_notes_initial=case_compliance.statement_compliance_notes_initial,
                website_compliance_state_12_week=case_compliance.website_compliance_state_12_week,
                website_compliance_notes_12_week=case_compliance.website_compliance_notes_12_week,
                statement_compliance_state_12_week=case_compliance.statement_compliance_state_12_week,
                statement_compliance_notes_12_week=case_compliance.statement_compliance_notes_12_week,
            )
        for case_contact in Contact.objects.filter(case=case):
            SimplifiedContact.objects.create(
                case=simplified_case,
                name=case_contact.name,
                job_title=case_contact.job_title,
                email=case_contact.email,
                preferred=case_contact.preferred,
                created=case_contact.created,
                updated=case_contact.updated,
                is_deleted=case_contact.is_deleted,
            )
        for case_event in CaseEvent.objects.filter(case=case):
            SimplifiedCaseEvent.objects.create(
                case=simplified_case,
                event_type=case_event.event_type,
                message=case_event.message,
                done_by=case_event.done_by,
                event_time=case_event.event_time,
            )
        for equality_body_correspondence in EqualityBodyCorrespondence.objects.filter(
            case=case
        ):
            SimplifiedEqualityBodyCorrespondence.objects.create(
                case=simplified_case,
                id_within_case=equality_body_correspondence.id_within_case,
                type=equality_body_correspondence.type,
                message=equality_body_correspondence.message,
                notes=equality_body_correspondence.notes,
                zendesk_url=equality_body_correspondence.zendesk_url,
                status=equality_body_correspondence.status,
                created=equality_body_correspondence.created,
                updated=equality_body_correspondence.updated,
                is_deleted=equality_body_correspondence.is_deleted,
            )
        for zendesk_ticket in ZendeskTicket.objects.filter(case=case):
            simplified_zendesk_ticket = SimplifiedZendeskTicket.objects.create(
                case=simplified_case,
                id_within_case=zendesk_ticket.id_within_case,
                url=zendesk_ticket.url,
                summary=zendesk_ticket.summary,
                is_deleted=zendesk_ticket.is_deleted,
            )
            simplified_zendesk_ticket.created = zendesk_ticket.created
            simplified_zendesk_ticket.save()
        for event_history in EventHistory.objects.filter(case=case):
            if event_history.content_type_id in case_content_models_by_id:
                simplified_content_type_id: int = simplified_content_ids_by_model[
                    CASES_TO_SIMPLIFIED_MODELS[
                        case_content_models_by_id[event_history.content_type_id]
                    ]
                ]
            else:
                simplified_content_type_id: int = event_history.content_type_id
            simplified_event_history = SimplifiedEventHistory.objects.create(
                case=simplified_case,
                content_type_id=simplified_content_type_id,
                object_id=event_history.object_id,
                event_type=event_history.event_type,
                difference=event_history.difference,
                created_by=event_history.created_by,
                is_deleted=event_history.is_deleted,
            )
            simplified_event_history.created = event_history.created
            simplified_event_history.save()
        simplified_case.save()


def reverse_code(apps, schema_editor):
    SimplifiedCase = apps.get_model("simplified", "SimplifiedCase")
    SimplifiedCaseStatus = apps.get_model("simplified", "CaseStatus")
    SimplifiedCaseCompliance = apps.get_model("simplified", "CaseCompliance")
    SimplifiedContact = apps.get_model("simplified", "Contact")
    SimplifiedCaseEvent = apps.get_model("simplified", "CaseEvent")
    SimplifiedEqualityBodyCorrespondence = apps.get_model(
        "simplified", "EqualityBodyCorrespondence"
    )
    SimplifiedZendeskTicket = apps.get_model("simplified", "ZendeskTicket")
    SimplifiedEventHistory = apps.get_model("simplified", "SimplifiedEventHistory")
    SimplifiedEventHistory.objects.all().delete()
    SimplifiedZendeskTicket.objects.all().delete()
    SimplifiedEqualityBodyCorrespondence.objects.all().delete()
    SimplifiedCaseEvent.objects.all().delete()
    SimplifiedContact.objects.all().delete()
    SimplifiedCaseCompliance.objects.all().delete()
    SimplifiedCaseStatus.objects.all().delete()
    SimplifiedCase.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("simplified", "0002_populate_contenttypes"),
    ]

    operations = [
        migrations.RunPython(populate_simplified_cases, reverse_code=reverse_code),
    ]
